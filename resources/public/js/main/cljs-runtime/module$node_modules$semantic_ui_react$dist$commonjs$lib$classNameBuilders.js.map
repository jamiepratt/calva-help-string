{
"version":3,
"file":"module$node_modules$semantic_ui_react$dist$commonjs$lib$classNameBuilders.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtIA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,YAAR,CAAuBF,OAAQG,CAAAA,oBAA/B,CAAsDH,OAAQI,CAAAA,gBAA9D,CAAiFJ,OAAQK,CAAAA,eAAzF,CAA2GL,OAAQM,CAAAA,mBAAnH,CAAyIN,OAAQO,CAAAA,cAAjJ,CAAkKP,OAAQQ,CAAAA,UAA1K,CAAuL,IAAK,EAE5L,KAAIC,cAAgBX,OAAA,CAAQ,sEAAR,CAmCpBE,QAAQQ,CAAAA,UAAR,CAdiBA,QAAmB,CAACE,GAAD,CAAMC,GAAN,CAAW,CAC7C,MAAOD,IAAP,EAAcC,GAD+B,CAgB/C,KAAIJ,eAAiBA,QAAuB,CAACG,GAAD;AAAMC,GAAN,CAAW,CACrD,MAAOD,IAAP,EAAsB,CAAA,CAAtB,GAAcA,GAAd,EAA8BA,GAA9B,CAAoC,GAApC,CAA0CC,GADW,CAkBvDX,QAAQO,CAAAA,cAAR,CAAyBA,cAsBzBP,QAAQM,CAAAA,mBAAR,CApB0BA,QAA4B,CAACI,GAAD,CAAMC,GAAN,CAAW,CAC/D,MAAOD,IAAP,GAAuB,CAAA,CAAR,GAAAA,GAAA,CAAeC,GAAf,CAAqBD,GAArB,CAA2B,GAA3B,CAAiCC,GAAhD,CAD+D,CA2CjEX,QAAQK,CAAAA,eAAR,CArBsBA,QAAwB,CAACK,GAAD,CAAMC,GAAN,CAAW,CACvD,MAAKD,IAAL,EAAoB,CAAA,CAApB,GAAYA,GAAZ,CACOA,GAAIE,CAAAA,OAAJ,CAAY,cAAZ,CAA4B,cAA5B,CAA4CA,CAAAA,OAA5C,CAAoD,cAApD,CAAoE,aAApE,CAAmFC,CAAAA,KAAnF,CAAyF,GAAzF,CAA8FC,CAAAA,GAA9F,CAAkG,QAAS,CAACC,IAAD,CAAO,CACvH,MAAOA,KAAKH,CAAAA,OAAL,CAAa,GAAb,CAAkB,GAAlB,CAAP,CAAgC,GAAhC,CAAsCD,GADiF,CAAlH,CAEJK,CAAAA,IAFI,CAEC,GAFD,CADP,CAAiC,IADsB,CAqCzDhB,QAAQI,CAAAA,gBAAR,CAduBA,QAAyB,CAACM,GAAD,CAAM,CACpD,MAAe,WAAR,GAAAA,GAAA,CAAsB,WAAtB,CAAoCH,cAAA,CAAeG,GAAf,CAAoB,SAApB,CADS,CA0CtDV,QAAQG,CAAAA,oBAAR;AA1B2BA,QAA6B,CAACO,GAAD,CAAM,CAC5D,MAAOH,eAAA,CAAeG,GAAf,CAAoB,SAApB,CADqD,CAkD9DV,QAAQE,CAAAA,YAAR,CAtBmBA,QAAqB,CAACQ,GAAD,CAAMO,UAAN,CAAkBC,QAAlB,CAA4B,CAC/C,IAAK,EAAxB,GAAID,UAAJ,GACEA,UADF,CACe,EADf,CAIiB,KAAK,EAAtB,GAAIC,QAAJ,GACEA,QADF,CACa,CAAA,CADb,CAIA,IAAIA,QAAJ,EAAwB,OAAxB,GAAgBR,GAAhB,CACE,MAAO,aAGLS,SAAAA,CAAU,MAAOT,IAErB,OAAiB,QAAjB,GAAKS,QAAL,EAAyC,QAAzC,GAA6BA,QAA7B,EAAsDF,CAAAA,UAAtD,CAIO,GAAIR,aAAcW,CAAAA,YAAlB,EAAgCV,GAAhC,CAJP,CACS,GAAID,aAAcW,CAAAA,YAAlB,EAAgCV,GAAhC,CADT,CACgD,GADhD,CACsDO,UAhBY,CAxJkE;",
"sources":["node_modules/semantic-ui-react/dist/commonjs/lib/classNameBuilders.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$semantic_ui_react$dist$commonjs$lib$classNameBuilders\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.useWidthProp = exports.useVerticalAlignProp = exports.useTextAlignProp = exports.useMultipleProp = exports.useKeyOrValueAndKey = exports.useValueAndKey = exports.useKeyOnly = void 0;\n\nvar _numberToWord = require(\"./numberToWord\");\n\n/*\n * There are 3 prop patterns used to build up the className for a component.\n * Each utility here is meant for use in a classnames() argument.\n *\n * There is no util for valueOnly() because it would simply return val.\n * Use the prop value inline instead.\n *   <Label size='big' />\n *   <div class=\"ui big label\"></div>\n */\n\n/**\n * Props where only the prop key is used in the className.\n * @param {*} val A props value\n * @param {string} key A props key\n *\n * @example\n * <Label tag />\n * <div class=\"ui tag label\"></div>\n */\nvar useKeyOnly = function useKeyOnly(val, key) {\n  return val && key;\n};\n/**\n * Props that require both a key and value to create a className.\n * @param {*} val A props value\n * @param {string} key A props key\n *\n * @example\n * <Label corner='left' />\n * <div class=\"ui left corner label\"></div>\n */\n\n\nexports.useKeyOnly = useKeyOnly;\n\nvar useValueAndKey = function useValueAndKey(val, key) {\n  return val && val !== true && val + \" \" + key;\n};\n/**\n * Props whose key will be used in className, or value and key.\n * @param {*} val A props value\n * @param {string} key A props key\n *\n * @example Key Only\n * <Label pointing />\n * <div class=\"ui pointing label\"></div>\n *\n * @example Key and Value\n * <Label pointing='left' />\n * <div class=\"ui left pointing label\"></div>\n */\n\n\nexports.useValueAndKey = useValueAndKey;\n\nvar useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\n  return val && (val === true ? key : val + \" \" + key);\n}; //\n// Prop to className exceptions\n//\n\n/**\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\n *\n * @param {*} val The value of the \"multiple\" prop\n * @param {*} key A props key\n *\n * @example\n * <Grid.Row only='mobile' />\n * <Grid.Row only='mobile tablet' />\n * <div class=\"mobile only row\"></div>\n * <div class=\"mobile only tablet only row\"></div>\n */\n\n\nexports.useKeyOrValueAndKey = useKeyOrValueAndKey;\n\nvar useMultipleProp = function useMultipleProp(val, key) {\n  if (!val || val === true) return null;\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\n    return prop.replace('-', ' ') + \" \" + key;\n  }).join(' ');\n};\n/**\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\n * @param {*} val The value of the \"textAlign\" prop\n *\n * @example\n * <Container textAlign='justified' />\n * <div class=\"ui justified container\"></div>\n *\n * @example\n * <Container textAlign='left' />\n * <div class=\"ui left aligned container\"></div>\n */\n\n\nexports.useMultipleProp = useMultipleProp;\n\nvar useTextAlignProp = function useTextAlignProp(val) {\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\n};\n/**\n * The \"verticalAlign\" prop follows the useValueAndKey.\n *\n * @param {*} val The value of the \"verticalAlign\" prop\n *\n * @example\n * <Grid verticalAlign='middle' />\n * <div class=\"ui middle aligned grid\"></div>\n */\n\n\nexports.useTextAlignProp = useTextAlignProp;\n\nvar useVerticalAlignProp = function useVerticalAlignProp(val) {\n  return useValueAndKey(val, 'aligned');\n};\n/**\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\n * \"X\" is a numberToWord value and \"wide\" is configurable.\n * @param {*} val The prop value\n * @param {string} [widthClass=''] The class\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\n *\n * @example\n * <Grid columns='equal' />\n * <div class=\"ui equal width grid\"></div>\n *\n * <Form widths='equal' />\n * <div class=\"ui equal width form\"></div>\n *\n * <FieldGroup widths='equal' />\n * <div class=\"equal width fields\"></div>\n *\n * @example\n * <Grid columns={4} />\n * <div class=\"ui four column grid\"></div>\n */\n\n\nexports.useVerticalAlignProp = useVerticalAlignProp;\n\nvar useWidthProp = function useWidthProp(val, widthClass, canEqual) {\n  if (widthClass === void 0) {\n    widthClass = '';\n  }\n\n  if (canEqual === void 0) {\n    canEqual = false;\n  }\n\n  if (canEqual && val === 'equal') {\n    return 'equal width';\n  }\n\n  var valType = typeof val;\n\n  if ((valType === 'string' || valType === 'number') && widthClass) {\n    return (0, _numberToWord.numberToWord)(val) + \" \" + widthClass;\n  }\n\n  return (0, _numberToWord.numberToWord)(val);\n};\n\nexports.useWidthProp = useWidthProp;\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","useWidthProp","useVerticalAlignProp","useTextAlignProp","useMultipleProp","useKeyOrValueAndKey","useValueAndKey","useKeyOnly","_numberToWord","val","key","replace","split","map","prop","join","widthClass","canEqual","valType","numberToWord"]
}
